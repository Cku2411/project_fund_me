{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/Fundme.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\n//Address GPB-USD: 0x73D9c953DaaB1c829D01E1FC0bd92e28ECfB66DB\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\nimport \"./PriceConverter.sol\";\r\n\r\nerror NotOwner();\r\n\r\ncontract Fundme {\r\n    // VERIABLE DECLARE\r\n    AggregatorV3Interface public priceFeed;\r\n    uint256 public constant minimumUsd = 50 * 10 ** 18;\r\n    address[] public funders;\r\n    address public immutable i_owner;\r\n    mapping(address => uint256) public addressToAmountFunded;\r\n\r\n    // CONSTRUCTOR\r\n    constructor(address priceFeedAddress) {\r\n        i_owner = msg.sender;\r\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\r\n    }\r\n\r\n    function callMeRightAway() public {}\r\n\r\n    function fund() public payable {\r\n        //Want to be able to set a minimum amount in USD\r\n        require(\r\n            PriceConverter.getConversionRater(msg.value, priceFeed) >\r\n                minimumUsd,\r\n            \"Didn't send enough\"\r\n        );\r\n        funders.push(msg.sender);\r\n        addressToAmountFunded[msg.sender] = msg.value;\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        for (\r\n            uint256 funderIndex = 0;\r\n            funderIndex < funders.length;\r\n            funderIndex++\r\n        ) {\r\n            address funder = funders[funderIndex];\r\n            addressToAmountFunded[funder] = 0;\r\n        }\r\n        //reset the array\r\n        funders = new address[](0);\r\n        //actual withdraw ETH\r\n\r\n        //transfer\r\n\r\n        //send\r\n        // bool sendSuccess =  payable(msg.sender).send(address(this).balance);\r\n        // require(sendSuccess, \"Send failed\");\r\n        //call, return 2 variables\r\n        (bool callSuccess, ) = payable(msg.sender).call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n        require(callSuccess, \"Call failed\");\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        // require(msg.sender == i_owner, \"Sender is not owner\");\r\n        if (msg.sender != i_owner) {\r\n            revert NotOwner();\r\n        }\r\n        _;\r\n    }\r\n\r\n    //What happens if someone sedns this contracat ETH without calling the fund function\r\n    //receiver()\r\n    receive() external payable {\r\n        fund();\r\n    }\r\n\r\n    fallback() external payable {\r\n        fund();\r\n    }\r\n\r\n    //\r\n}\r\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConverter {\r\n    function getDecimals() internal view returns (uint8) {\r\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\r\n            0x73D9c953DaaB1c829D01E1FC0bd92e28ECfB66DB\r\n        );\r\n        uint8 decimals = priceFeed.decimals();\r\n        return decimals;\r\n    }\r\n\r\n    function getPrice(\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\r\n        //     0x73D9c953DaaB1c829D01E1FC0bd92e28ECfB66DB\r\n        // );\r\n        (, int256 price, , , ) = priceFeed.latestRoundData();\r\n        return uint256(price * 10000000000);\r\n    }\r\n\r\n    function getVersion() internal view returns (uint256) {\r\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\r\n            0x73D9c953DaaB1c829D01E1FC0bd92e28ECfB66DB\r\n        );\r\n        return priceFeed.version();\r\n    }\r\n\r\n    function getDescription() internal view returns (string memory) {\r\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\r\n            0x73D9c953DaaB1c829D01E1FC0bd92e28ECfB66DB\r\n        );\r\n        return priceFeed.description();\r\n    }\r\n\r\n    function getConversionRater(\r\n        uint256 gpuAmount,\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        uint gpuPrice = getPrice(priceFeed);\r\n        uint256 gpuAmountInUsd = (gpuAmount * gpuPrice) / 1000000000000000000;\r\n        return gpuAmountInUsd;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}