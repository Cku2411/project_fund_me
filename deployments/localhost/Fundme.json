{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "callMeRightAway",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x98b558af4e02b10528b4ce663d7fc00d58bea77b58ec695d0a0e10076dc85171",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "977366",
    "logsBloom": "0x
    "blockHash": "0xa8ad53bd590f496e98eb317571f375c819b6451815d48192ba70d6d8772eb1d6",
    "transactionHash": "0x98b558af4e02b10528b4ce663d7fc00d58bea77b58ec695d0a0e10076dc85171",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "977366",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "700fa042f3b533644128b68e6266a2ae",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"callMeRightAway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Cku2411\",\"details\":\"this implements price feeds as our library \",\"kind\":\"dev\",\"methods\":{\"callMeRightAway()\":{\"details\":\"this implements price feeds as our library \"}},\"title\":\"A contract for crowd fungding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"callMeRightAway()\":{\"notice\":\"this function funds this contract\"}},\"notice\":\"this contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Fundme.sol\":\"Fundme\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/Fundme.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n// import\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"./PriceConverter.sol\\\";\\r\\n\\r\\n// error codes\\r\\nerror FundMe__NotOwner();\\r\\n\\r\\n// Contract\\r\\n/** @title A contract for crowd fungding\\r\\n * @author Cku2411\\r\\n * @notice this contract is to demo a sample funding contract\\r\\n * @dev this implements price feeds as our library\\r\\n * */\\r\\n\\r\\ncontract Fundme {\\r\\n    // Type declaration\\r\\n    // state Variable\\r\\n    AggregatorV3Interface private s_priceFeed;\\r\\n    uint256 public constant minimumUsd = 50 * 10 ** 18;\\r\\n    address[] private s_funders;\\r\\n    address private immutable i_owner;\\r\\n    mapping(address => uint256) private s_addressToAmountFunded;\\r\\n\\r\\n    // Modifier\\r\\n    modifier onlyOwner() {\\r\\n        // require(msg.sender == i_owner, \\\"Sender is not owner\\\");\\r\\n        if (msg.sender != i_owner) {\\r\\n            revert FundMe__NotOwner();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // CONSTRUCTOR\\r\\n    constructor(address priceFeedAddress) {\\r\\n        i_owner = msg.sender;\\r\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\r\\n    }\\r\\n\\r\\n    //What happens if someone sedns this contracat ETH without calling the fund function\\r\\n    //receiver()\\r\\n    receive() external payable {\\r\\n        fund();\\r\\n    }\\r\\n\\r\\n    fallback() external payable {\\r\\n        fund();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice this function funds this contract\\r\\n     * @dev this implements price feeds as our library\\r\\n     *\\r\\n     * */\\r\\n\\r\\n    function callMeRightAway() public {}\\r\\n\\r\\n    function fund() public payable {\\r\\n        //Want to be able to set a minimum amount in USD\\r\\n        require(\\r\\n            PriceConverter.getConversionRater(msg.value, s_priceFeed) >\\r\\n                minimumUsd,\\r\\n            \\\"Didn't send enough\\\"\\r\\n        );\\r\\n        s_funders.push(msg.sender);\\r\\n        s_addressToAmountFunded[msg.sender] = msg.value;\\r\\n    }\\r\\n\\r\\n    function withdraw() public onlyOwner {\\r\\n        for (\\r\\n            uint256 funderIndex = 0;\\r\\n            funderIndex < s_funders.length;\\r\\n            funderIndex++\\r\\n        ) {\\r\\n            address funder = s_funders[funderIndex];\\r\\n            s_addressToAmountFunded[funder] = 0;\\r\\n        }\\r\\n        //reset the array\\r\\n        s_funders = new address[](0);\\r\\n        //actual withdraw ETH\\r\\n\\r\\n        //transfer\\r\\n\\r\\n        //send\\r\\n        // bool sendSuccess =  payable(msg.sender).send(address(this).balance);\\r\\n        // require(sendSuccess, \\\"Send failed\\\");\\r\\n        //call, return 2 variables\\r\\n        (bool callSuccess, ) = payable(msg.sender).call{\\r\\n            value: address(this).balance\\r\\n        }(\\\"\\\");\\r\\n        require(callSuccess, \\\"Call failed\\\");\\r\\n    }\\r\\n\\r\\n    function cheaperWithdraw() public payable onlyOwner {\\r\\n        // the purpose is to read array in memory other than reading from storage\\r\\n        // so we create a copy array in memory and using looping there.\\r\\n        address[] memory funders = s_funders;\\r\\n        //mapping can't be in memory\\r\\n        for (\\r\\n            uint256 funderIndex = 0;\\r\\n            funderIndex < funders.length;\\r\\n            funderIndex++\\r\\n        ) {\\r\\n            address funder = funders[funderIndex];\\r\\n            s_addressToAmountFunded[funder] = 0;\\r\\n        }\\r\\n        s_funders = new address[](0);\\r\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success);\\r\\n    }\\r\\n\\r\\n    // GETTER FUNCTION\\r\\n\\r\\n    function getOwner() public view returns (address) {\\r\\n        return i_owner;\\r\\n    }\\r\\n\\r\\n    function getFunder(uint256 _index) public view returns (address) {\\r\\n        return s_funders[_index];\\r\\n    }\\r\\n\\r\\n    function getAddressToAmountFunded(\\r\\n        address _funder\\r\\n    ) public view returns (uint256) {\\r\\n        return s_addressToAmountFunded[_funder];\\r\\n    }\\r\\n\\r\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\r\\n        return s_priceFeed;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x289207e2d306a01b03330bfa3f8def38543feb8080d70d69bd1c1d2d0d52013e\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\nlibrary PriceConverter {\\r\\n    function getDecimals() internal view returns (uint8) {\\r\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\\r\\n            0x73D9c953DaaB1c829D01E1FC0bd92e28ECfB66DB\\r\\n        );\\r\\n        uint8 decimals = priceFeed.decimals();\\r\\n        return decimals;\\r\\n    }\\r\\n\\r\\n    function getPrice(\\r\\n        AggregatorV3Interface priceFeed\\r\\n    ) internal view returns (uint256) {\\r\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\r\\n        //     0x73D9c953DaaB1c829D01E1FC0bd92e28ECfB66DB\\r\\n        // );\\r\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\r\\n        return uint256(price * 10000000000);\\r\\n    }\\r\\n\\r\\n    function getVersion() internal view returns (uint256) {\\r\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\\r\\n            0x73D9c953DaaB1c829D01E1FC0bd92e28ECfB66DB\\r\\n        );\\r\\n        return priceFeed.version();\\r\\n    }\\r\\n\\r\\n    function getDescription() internal view returns (string memory) {\\r\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\\r\\n            0x73D9c953DaaB1c829D01E1FC0bd92e28ECfB66DB\\r\\n        );\\r\\n        return priceFeed.description();\\r\\n    }\\r\\n\\r\\n    function getConversionRater(\\r\\n        uint256 gpuAmount,\\r\\n        AggregatorV3Interface priceFeed\\r\\n    ) internal view returns (uint256) {\\r\\n        uint gpuPrice = getPrice(priceFeed);\\r\\n        uint256 gpuAmountInUsd = (gpuAmount * gpuPrice) / 1000000000000000000;\\r\\n        return gpuAmountInUsd;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2aa70d357b29d2eeb3a7a8c1dc78f7a3daf02eb74eae2ddadf1c42cdef472d33\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620011ce380380620011ce83398181016040528101906200003791906200011c565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200014e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e482620000b7565b9050919050565b620000f681620000d7565b81146200010257600080fd5b50565b6000815190506200011681620000eb565b92915050565b600060208284031215620001355762000134620000b2565b5b6000620001458482850162000105565b91505092915050565b60805161104f6200017f600039600081816103570152818161059a015281816105e901526107e0015261104f6000f3fe60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e8146101395780639e87a5cd14610164578063b60d42881461018f578063be2693f014610199578063d7b4750c146101a357610099565b80630343fb25146100a3578063098de820146100e05780633770c6af1461010b5780633ccfd60b1461012257610099565b36610099576100976101e0565b005b6100a16101e0565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610a95565b6102fd565b6040516100d79190610adb565b60405180910390f35b3480156100ec57600080fd5b506100f5610346565b6040516101029190610adb565b60405180910390f35b34801561011757600080fd5b50610120610353565b005b34801561012e57600080fd5b50610137610355565b005b34801561014557600080fd5b5061014e610596565b60405161015b9190610b05565b60405180910390f35b34801561017057600080fd5b506101796105be565b6040516101869190610b7f565b60405180910390f35b6101976101e0565b005b6101a16105e7565b005b3480156101af57600080fd5b506101ca60048036038101906101c59190610bc6565b610876565b6040516101d79190610b05565b60405180910390f35b6802b5e3af16b18800006102143460008054906101000a900473ffffffffffffffffffffffffffffffffffffffff166108be565b11610254576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024b90610c50565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6802b5e3af16b188000081565b565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103da576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561048657600060018281548110610400576103ff610c70565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061047e90610cce565b9150506103dd565b50600067ffffffffffffffff8111156104a2576104a1610d16565b5b6040519080825280602002602001820160405280156104d05781602001602082028036833780820191505090505b50600190805190602001906104e692919061098b565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161050d90610d76565b60006040518083038185875af1925050503d806000811461054a576040519150601f19603f3d011682016040523d82523d6000602084013e61054f565b606091505b5050905080610593576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058a90610dd7565b60405180910390fd5b50565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461066c576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106f057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106a6575b5050505050905060005b815181101561077b57600082828151811061071857610717610c70565b5b602002602001015190506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061077390610cce565b9150506106fa565b50600067ffffffffffffffff81111561079757610796610d16565b5b6040519080825280602002602001820160405280156107c55781602001602082028036833780820191505090505b50600190805190602001906107db92919061098b565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161082290610d76565b60006040518083038185875af1925050503d806000811461085f576040519150601f19603f3d011682016040523d82523d6000602084013e610864565b606091505b505090508061087257600080fd5b5050565b60006001828154811061088c5761088b610c70565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108ca836108fa565b90506000670de0b6b3a764000082866108e39190610df7565b6108ed9190610e68565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610948573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096c9190610f26565b5050509150506402540be400816109839190610fa1565b915050919050565b828054828255906000526020600020908101928215610a04579160200282015b82811115610a035782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109ab565b5b509050610a119190610a15565b5090565b5b80821115610a2e576000816000905550600101610a16565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a6282610a37565b9050919050565b610a7281610a57565b8114610a7d57600080fd5b50565b600081359050610a8f81610a69565b92915050565b600060208284031215610aab57610aaa610a32565b5b6000610ab984828501610a80565b91505092915050565b6000819050919050565b610ad581610ac2565b82525050565b6000602082019050610af06000830184610acc565b92915050565b610aff81610a57565b82525050565b6000602082019050610b1a6000830184610af6565b92915050565b6000819050919050565b6000610b45610b40610b3b84610a37565b610b20565b610a37565b9050919050565b6000610b5782610b2a565b9050919050565b6000610b6982610b4c565b9050919050565b610b7981610b5e565b82525050565b6000602082019050610b946000830184610b70565b92915050565b610ba381610ac2565b8114610bae57600080fd5b50565b600081359050610bc081610b9a565b92915050565b600060208284031215610bdc57610bdb610a32565b5b6000610bea84828501610bb1565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567680000000000000000000000000000600082015250565b6000610c3a601283610bf3565b9150610c4582610c04565b602082019050919050565b60006020820190508181036000830152610c6981610c2d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cd982610ac2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610d0b57610d0a610c9f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d60600083610d45565b9150610d6b82610d50565b600082019050919050565b6000610d8182610d53565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610dc1600b83610bf3565b9150610dcc82610d8b565b602082019050919050565b60006020820190508181036000830152610df081610db4565b9050919050565b6000610e0282610ac2565b9150610e0d83610ac2565b9250828202610e1b81610ac2565b91508282048414831517610e3257610e31610c9f565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e7382610ac2565b9150610e7e83610ac2565b925082610e8e57610e8d610e39565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610eb881610e99565b8114610ec357600080fd5b50565b600081519050610ed581610eaf565b92915050565b6000819050919050565b610eee81610edb565b8114610ef957600080fd5b50565b600081519050610f0b81610ee5565b92915050565b600081519050610f2081610b9a565b92915050565b600080600080600060a08688031215610f4257610f41610a32565b5b6000610f5088828901610ec6565b9550506020610f6188828901610efc565b9450506040610f7288828901610f11565b9350506060610f8388828901610f11565b9250506080610f9488828901610ec6565b9150509295509295909350565b6000610fac82610edb565b9150610fb783610edb565b9250828202610fc581610edb565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610ffd57610ffc610c9f565b5b828205841483151761101257611011610c9f565b5b509291505056fea26469706673582212209305a36e2eccd4ca2b57c57d6a88ec7d83a35372a5435a8997621333343e72b464736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e8146101395780639e87a5cd14610164578063b60d42881461018f578063be2693f014610199578063d7b4750c146101a357610099565b80630343fb25146100a3578063098de820146100e05780633770c6af1461010b5780633ccfd60b1461012257610099565b36610099576100976101e0565b005b6100a16101e0565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610a95565b6102fd565b6040516100d79190610adb565b60405180910390f35b3480156100ec57600080fd5b506100f5610346565b6040516101029190610adb565b60405180910390f35b34801561011757600080fd5b50610120610353565b005b34801561012e57600080fd5b50610137610355565b005b34801561014557600080fd5b5061014e610596565b60405161015b9190610b05565b60405180910390f35b34801561017057600080fd5b506101796105be565b6040516101869190610b7f565b60405180910390f35b6101976101e0565b005b6101a16105e7565b005b3480156101af57600080fd5b506101ca60048036038101906101c59190610bc6565b610876565b6040516101d79190610b05565b60405180910390f35b6802b5e3af16b18800006102143460008054906101000a900473ffffffffffffffffffffffffffffffffffffffff166108be565b11610254576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024b90610c50565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6802b5e3af16b188000081565b565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103da576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561048657600060018281548110610400576103ff610c70565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061047e90610cce565b9150506103dd565b50600067ffffffffffffffff8111156104a2576104a1610d16565b5b6040519080825280602002602001820160405280156104d05781602001602082028036833780820191505090505b50600190805190602001906104e692919061098b565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161050d90610d76565b60006040518083038185875af1925050503d806000811461054a576040519150601f19603f3d011682016040523d82523d6000602084013e61054f565b606091505b5050905080610593576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058a90610dd7565b60405180910390fd5b50565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461066c576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106f057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106a6575b5050505050905060005b815181101561077b57600082828151811061071857610717610c70565b5b602002602001015190506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061077390610cce565b9150506106fa565b50600067ffffffffffffffff81111561079757610796610d16565b5b6040519080825280602002602001820160405280156107c55781602001602082028036833780820191505090505b50600190805190602001906107db92919061098b565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161082290610d76565b60006040518083038185875af1925050503d806000811461085f576040519150601f19603f3d011682016040523d82523d6000602084013e610864565b606091505b505090508061087257600080fd5b5050565b60006001828154811061088c5761088b610c70565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108ca836108fa565b90506000670de0b6b3a764000082866108e39190610df7565b6108ed9190610e68565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610948573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096c9190610f26565b5050509150506402540be400816109839190610fa1565b915050919050565b828054828255906000526020600020908101928215610a04579160200282015b82811115610a035782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109ab565b5b509050610a119190610a15565b5090565b5b80821115610a2e576000816000905550600101610a16565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a6282610a37565b9050919050565b610a7281610a57565b8114610a7d57600080fd5b50565b600081359050610a8f81610a69565b92915050565b600060208284031215610aab57610aaa610a32565b5b6000610ab984828501610a80565b91505092915050565b6000819050919050565b610ad581610ac2565b82525050565b6000602082019050610af06000830184610acc565b92915050565b610aff81610a57565b82525050565b6000602082019050610b1a6000830184610af6565b92915050565b6000819050919050565b6000610b45610b40610b3b84610a37565b610b20565b610a37565b9050919050565b6000610b5782610b2a565b9050919050565b6000610b6982610b4c565b9050919050565b610b7981610b5e565b82525050565b6000602082019050610b946000830184610b70565b92915050565b610ba381610ac2565b8114610bae57600080fd5b50565b600081359050610bc081610b9a565b92915050565b600060208284031215610bdc57610bdb610a32565b5b6000610bea84828501610bb1565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567680000000000000000000000000000600082015250565b6000610c3a601283610bf3565b9150610c4582610c04565b602082019050919050565b60006020820190508181036000830152610c6981610c2d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cd982610ac2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610d0b57610d0a610c9f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d60600083610d45565b9150610d6b82610d50565b600082019050919050565b6000610d8182610d53565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610dc1600b83610bf3565b9150610dcc82610d8b565b602082019050919050565b60006020820190508181036000830152610df081610db4565b9050919050565b6000610e0282610ac2565b9150610e0d83610ac2565b9250828202610e1b81610ac2565b91508282048414831517610e3257610e31610c9f565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e7382610ac2565b9150610e7e83610ac2565b925082610e8e57610e8d610e39565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610eb881610e99565b8114610ec357600080fd5b50565b600081519050610ed581610eaf565b92915050565b6000819050919050565b610eee81610edb565b8114610ef957600080fd5b50565b600081519050610f0b81610ee5565b92915050565b600081519050610f2081610b9a565b92915050565b600080600080600060a08688031215610f4257610f41610a32565b5b6000610f5088828901610ec6565b9550506020610f6188828901610efc565b9450506040610f7288828901610f11565b9350506060610f8388828901610f11565b9250506080610f9488828901610ec6565b9150509295509295909350565b6000610fac82610edb565b9150610fb783610edb565b9250828202610fc581610edb565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610ffd57610ffc610c9f565b5b828205841483151761101257611011610c9f565b5b509291505056fea26469706673582212209305a36e2eccd4ca2b57c57d6a88ec7d83a35372a5435a8997621333343e72b464736f6c63430008110033",
  "devdoc": {
    "author": "Cku2411",
    "details": "this implements price feeds as our library ",
    "kind": "dev",
    "methods": {
      "callMeRightAway()": {
        "details": "this implements price feeds as our library "
      }
    },
    "title": "A contract for crowd fungding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "callMeRightAway()": {
        "notice": "this function funds this contract"
      }
    },
    "notice": "this contract is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 55,
        "contract": "contracts/Fundme.sol:Fundme",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 65,
        "contract": "contracts/Fundme.sol:Fundme",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 71,
        "contract": "contracts/Fundme.sol:Fundme",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}